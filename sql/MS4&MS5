-------------MILESTONE 4 SOLUTION---------------------

---------PART 1 ------------

--Alter or create
Create TRIGGER check_overlapping_meetings ON WEEKLYMEETING
INSTEAD OF INSERT AS
BEGIN
  DECLARE @meet_type VARCHAR(40)
  select @meet_type = meeting_type from inserted
  DECLARE @sec_id INT
  select @sec_id = sec_id from inserted
  DECLARE @day_meet VARCHAR(40)
  select @day_meet = days from inserted
  DECLARE @st_time TIME
  select @st_time = start_time from inserted

  SELECT wm.meeting_type, wc.days, wm.start_time, wm.end_time
  INTO #temp1
  FROM WEEKLYMEETING wm
    JOIN SECTION s ON wm.sec_id = s.id
    JOIN WEEKCONVERSION wc ON wc.SCHEDULE = wm.days
  WHERE s.id = @sec_id;

  SELECT @meet_type AS meetingType, wc.DAYS AS meetDays, @st_time as startTime, DATEADD(hh,1,@st_time) AS endTime INTO #temp2 FROM
    WEEKCONVERSION wc WHERE wc.SCHEDULE = @day_meet
  IF (
       SELECT COUNT(*) AS TOTAL FROM #temp1 AS T1
       WHERE EXISTS(
           SELECT * FROM #temp2 AS T2 WHERE
             T2.meetDays = T1.DAYS AND
             T2.startTime = T1.start_time
       )) > 0
    BEGIN
      RAISERROR ('A section at provided time already exists, please enter a different time',16,1);
      RETURN
    END
    
    
    
    
---------PART 2 ------------
CREATE TRIGGER tb_section_max 
on SECTIONENROLLMENT 
INSTEAD OF INSERT
as
Begin
	Declare @curr_enrollment int
	Declare @max_enrollment int
	Declare @target_sec int
	SELECT @target_sec = SECTION_ID FROM inserted
	SELECT @curr_enrollment = COUNT(*) FROM SECTIONENROLLMENT WHERE SECTION_ID=@target_sec;
	SELECT @max_enrollment = SECTION_MAX FROM SECTION WHERE SECTION_NUM = @target_sec;
	
	if (@curr_enrollment=@max_enrollment)
	Begin
		Raiserror('Section is full',16,1)
		return
	END
	
	INSERT INTO SECTIONENROLLMENT (STUDENT_ID,SECTION_ID,UNITS_TAKING,GRADE_OPTION) 
	SELECT STUDENT_ID,SECTION_ID,UNITS_TAKING,GRADE_OPTION FROM inserted
END




----------PART 3-------------
CREATE TRIGGER prof_multiple_section 
ON CURRENTLYTEACHING
INSTEAD OF INSERT AS
BEGIN
	DECLARE @PROF_NAME VARCHAR(20)
	DECLARE @SEC_NUM INT
	
	SELECT @PROF_NAME=FACULTY FROM inserted
	SELECT @SEC_NUM=SECTION_ID FROM inserted
	
	SELECT WC.DAYS, WM.START_TIME, WM.END_TIME INTO #TEMP1 FROM WEEKLYMEETING WM 
	JOIN WEEKCONVERSION WC ON WC.SCHEDULE = WM.DAYS
	JOIN SECTION S ON S.ID = WM.SEC_ID
	JOIN CURRENTLYTEACHING CT ON CT.SECTION_ID=WM.SEC_ID 
	WHERE
	CT.FACULTY=@PROF_NAME
	ORDER BY DAYS
	
	SELECT WC.DAYS, WM.START_TIME, WM.END_TIME INTO #TEMP2 FROM WEEKLYMEETING WM 
	JOIN WEEKCONVERSION WC ON WC.SCHEDULE = WM.DAYS
	JOIN SECTION S ON S.ID = WM.SEC_ID
	WHERE
	S.ID = @SEC_NUM
	ORDER BY DAYS
	
	IF ((SELECT COUNT(*) FROM #TEMP1 T1 WHERE EXISTS
	(SELECT * FROM #TEMP2 T2 WHERE T1.DAYS=T2.DAYS AND T1.START_TIME=T2.START_TIME))>0)
	BEGIN
		RAISERROR ('COULD NOT ADD THE SECTION',16,1)
		RETURN
	END
	
	INSERT INTO CURRENTLYTEACHING VALUES(@SEC_NUM, @PROF_NAME)
	
	DROP TABLE #TEMP1
	DROP TABLE #TEMP2
END


----------------------------------------------------MILESTONE 5 SOLUTION -----------------------------------------

--CREATE CPQG TABLE

SELECT CO.ID AS COURSE_ID,CL.id AS CLASS_ID ,CO.COURSENUMBER, TH.FACULTY,Q.QUARTER,Q.YEAR,
COUNT(CASE WHEN grade_received IN('A+','A','A-') THEN 1 END) AS 'A',
COUNT(CASE WHEN grade_received IN('B','B+', 'B-') THEN 1 END) AS 'B',
COUNT(CASE WHEN grade_received IN('C','C+','C-') THEN 1 END) AS 'C',
COUNT(CASE WHEN grade_received IN('D') THEN 1 END) AS 'D',
COUNT(CASE WHEN grade_received IN('F','S','U') THEN 1 END) AS 'OTHER'
INTO CPQG FROM COURSE CO 
JOIN COURSE_WITHCLASS CWC ON CO.id = CWC.COURSE_ID
JOIN CLASS CL ON CWC.CLASS_ID = CL.id
JOIN TEACHINGHISTORY TH ON TH.CLASS_ID = CL.id
JOIN QUARTER Q ON CL.QUARTER = Q.QUARTER AND CL.CLASS_YEAR = Q.YEAR 
JOIN CLASSESTAKEN CT ON CT.CLASS_ID = TH.CLASS_ID
GROUP BY CO.id, TH.FACULTY,CO.COURSENUMBER, Q.QUARTER,Q.YEAR,CL.id


--CREATE CPG TABLE
SELECT CO.ID AS COURSE_ID,CL.id AS CLASS_ID ,CO.COURSENUMBER, TH.FACULTY,
COUNT(CASE WHEN grade_received IN('A+','A','A-') THEN 1 END) AS 'A',
COUNT(CASE WHEN grade_received IN('B','B+', 'B-') THEN 1 END) AS 'B',
COUNT(CASE WHEN grade_received IN('C','C+','C-') THEN 1 END) AS 'C',
COUNT(CASE WHEN grade_received IN('D') THEN 1 END) AS 'D',
COUNT(CASE WHEN grade_received IN('F','S','U') THEN 1 END) AS 'OTHER'
INTO CPG FROM COURSE CO 
JOIN COURSE_WITHCLASS CWC ON CO.id = CWC.COURSE_ID
JOIN CLASS CL ON CWC.CLASS_ID = CL.id
JOIN TEACHINGHISTORY TH ON TH.CLASS_ID = CL.id 
JOIN CLASSESTAKEN CT ON CT.CLASS_ID = TH.CLASS_ID
GROUP BY CO.id, TH.FACULTY,CO.COURSENUMBER,CL.id


--UPDATE CPQG AND CPG ON INSERT GRADE--------

ALTER TRIGGER cpqg_update_on_insert 
ON CLASSESTAKEN
AFTER INSERT AS 
BEGIN

	--DECLARE @OLD_FACULTY VARCHAR(40)
	--DECLARE @OLD_GRADE VARCHAR(5)
	--DECLARE @OLD_CLASSID INT
	
	DECLARE @NEW_CLASSID INT
	DECLARE @NEW_FACULTY VARCHAR(40)
	DECLARE @NEW_GRADE VARCHAR(5)
	

	SELECT @NEW_CLASSID = CLASS_ID FROM inserted
	SELECT @NEW_GRADE = GRADE_RECEIVED FROM inserted
	
	
	PRINT @NEW_CLASSID
	PRINT @NEW_GRADE
	
	SELECT CL.ID AS CL_ID,COR.ID AS CO_ID,COR.COURSENUMBER AS CO_NUM, FACULTY, Q.QUARTER, Q.YEAR INTO #TEMP1 FROM CLASSESTAKEN CT
	JOIN CLASS CL ON CL.ID = CT.CLASS_ID
	JOIN TEACHINGHISTORY TH ON TH.CLASS_ID = CL.ID
	JOIN QUARTER Q ON Q.QUARTER = CL.QUARTER AND CL.CLASS_YEAR = Q.YEAR
	JOIN COURSE_WITHCLASS CWC ON CWC.CLASS_ID = CL.ID
	JOIN COURSE COR ON COR.ID = CWC.COURSE_ID
	WHERE 
	CL.ID = @NEW_CLASSID
	GROUP BY CL.ID, COR.ID,COR.COURSENUMBER, FACULTY, Q.QUARTER, Q.YEAR
	
	
	IF((SELECT COUNT(*) FROM CPQG WHERE 
		COURSE_ID = (SELECT CO_ID FROM #TEMP1) AND 
		CLASS_ID = (SELECT CL_ID FROM #TEMP1) AND
		FACULTY = (SELECT FACULTY FROM #TEMP1) AND
		QUARTER = (SELECT QUARTER FROM #TEMP1) AND
		YEAR = (SELECT YEAR FROM #TEMP1))=0)
	BEGIN
		INSERT INTO CPQG (COURSE_ID, CLASS_ID, COURSENUMBER, FACULTY,QUARTER, YEAR,A,B,C,D,OTHER)
		SELECT CO_ID,CL_ID,CO_NUM,FACULTY,QUARTER,YEAR,0,0,0,0,0 FROM #TEMP1
		
		INSERT INTO CPG (COURSE_ID, CLASS_ID, COURSENUMBER, FACULTY,A,B,C,D,OTHER)
		SELECT CO_ID,CL_ID,CO_NUM, FACULTY,0,0,0,0,0 FROM #TEMP1
		
	END
	
	UPDATE CPQG SET 
	"A" = CASE WHEN @NEW_GRADE IN ('A','A+','A-') THEN "A" + 1 ELSE "A" END,
	"B" = CASE WHEN @NEW_GRADE IN ('B','B+','B-') THEN "B" + 1 ELSE "B" END,	
	"C" = CASE WHEN @NEW_GRADE IN ('C','C+','C-') THEN "C" + 1 ELSE "C" END,	
	"D" = CASE WHEN @NEW_GRADE ='D' THEN "D" + 1 ELSE "D" END,
	"OTHER" = CASE WHEN @NEW_GRADE IN ('F','S','U') THEN "OTHER" + 1 ELSE "OTHER" END
	WHERE 
	COURSE_ID = (SELECT CO_ID FROM #TEMP1) AND 
	CLASS_ID = (SELECT CL_ID FROM #TEMP1) AND
	FACULTY = (SELECT FACULTY FROM #TEMP1) AND
	QUARTER = (SELECT QUARTER FROM #TEMP1) AND
	YEAR = (SELECT YEAR FROM #TEMP1)
	
	
	UPDATE CPG SET 
	"A" = CASE WHEN @NEW_GRADE IN ('A','A+','A-') THEN "A" + 1 ELSE "A" END,
	"B" = CASE WHEN @NEW_GRADE IN ('B','B+','B-') THEN "B" + 1 ELSE "B" END,	
	"C" = CASE WHEN @NEW_GRADE IN ('C','C+','C-') THEN "C" + 1 ELSE "C" END,	
	"D" = CASE WHEN @NEW_GRADE ='D' THEN "D" + 1 ELSE "D" END,
	"OTHER" = CASE WHEN @NEW_GRADE IN ('F','S','U') THEN "OTHER" + 1 ELSE "OTHER" END
	WHERE 
	COURSE_ID = (SELECT CO_ID FROM #TEMP1) AND 
	CLASS_ID = (SELECT CL_ID FROM #TEMP1) AND
	FACULTY = (SELECT FACULTY FROM #TEMP1)
	
	DROP TABLE #TEMP1
	
END


-----------------------------------------------------

--UPDATE CPG AND CPG ON UPDATE GRADE------------

ALTER TRIGGER cpqg_update_on_UPDATE 
ON CLASSESTAKEN
FOR UPDATE AS 
BEGIN


	DECLARE @OLD_GRADE VARCHAR(5)

	
	DECLARE @NEW_CLASSID1 INT
	DECLARE @NEW_FACULTY1 VARCHAR(40)
	DECLARE @NEW_GRADE1 VARCHAR(5)

	SELECT @NEW_CLASSID1 = CLASS_ID FROM inserted
	SELECT @NEW_GRADE1 = GRADE_RECEIVED FROM inserted
	SELECT @OLD_GRADE = GRADE_RECEIVED FROM deleted
	
	PRINT @NEW_CLASSID1
	PRINT @NEW_GRADE1
	PRINT @OLD_GRADE
	
	SELECT CL.ID AS CL_ID,COR.ID AS CO_ID,COR.COURSENUMBER AS CO_NUM, FACULTY, Q.QUARTER, Q.YEAR INTO #TEMP1 FROM CLASSESTAKEN CT
	JOIN CLASS CL ON CL.ID = CT.CLASS_ID
	JOIN TEACHINGHISTORY TH ON TH.CLASS_ID = CL.ID
	JOIN QUARTER Q ON Q.QUARTER = CL.QUARTER AND CL.CLASS_YEAR = Q.YEAR
	JOIN COURSE_WITHCLASS CWC ON CWC.CLASS_ID = CL.ID
	JOIN COURSE COR ON COR.ID = CWC.COURSE_ID
	WHERE 
	CL.ID = @NEW_CLASSID1
	GROUP BY CL.ID, COR.ID,COR.COURSENUMBER, FACULTY, Q.QUARTER, Q.YEAR
	
	
	UPDATE CPQG SET 
	"A" = CASE WHEN @NEW_GRADE1 IN ('A','A+','A-') THEN "A" + 1 ELSE "A" END,
	"B" = CASE WHEN @NEW_GRADE1 IN ('B','B+','B-') THEN "B" + 1 ELSE "B" END,	
	"C" = CASE WHEN @NEW_GRADE1 IN ('C','C+','C-') THEN "C" + 1 ELSE "C" END,	
	"D" = CASE WHEN @NEW_GRADE1 ='D' THEN "D" + 1 ELSE "D" END,
	"OTHER" = CASE WHEN @NEW_GRADE1 IN ('F','S','U') THEN "OTHER" + 1 ELSE "OTHER" END
	WHERE 
	COURSE_ID = (SELECT CO_ID FROM #TEMP1) AND 
	CLASS_ID = (SELECT CL_ID FROM #TEMP1) AND
	FACULTY = (SELECT FACULTY FROM #TEMP1) AND
	QUARTER = (SELECT QUARTER FROM #TEMP1) AND
	YEAR = (SELECT YEAR FROM #TEMP1)
	
		
	UPDATE CPQG SET 
	"A" = CASE WHEN @OLD_GRADE IN ('A','A+','A-') THEN "A" - 1 ELSE "A" END,
	"B" = CASE WHEN @OLD_GRADE IN ('B','B+','B-') THEN "B" - 1 ELSE "B" END,	
	"C" = CASE WHEN @OLD_GRADE IN ('C','C+','C-') THEN "C" - 1 ELSE "C" END,	
	"D" = CASE WHEN @OLD_GRADE ='D' THEN "D" - 1 ELSE "D" END,
	"OTHER" = CASE WHEN @OLD_GRADE IN ('F','S','U') THEN "OTHER" - 1 ELSE "OTHER" END
	WHERE 
	COURSE_ID = (SELECT CO_ID FROM #TEMP1) AND 
	CLASS_ID = (SELECT CL_ID FROM #TEMP1) AND
	FACULTY = (SELECT FACULTY FROM #TEMP1) AND
	QUARTER = (SELECT QUARTER FROM #TEMP1) AND
	YEAR = (SELECT YEAR FROM #TEMP1)
	
	
	UPDATE CPG SET 
	"A" = CASE WHEN @NEW_GRADE1 IN ('A','A+','A-') THEN "A" + 1 ELSE "A" END,
	"B" = CASE WHEN @NEW_GRADE1 IN ('B','B+','B-') THEN "B" + 1 ELSE "B" END,	
	"C" = CASE WHEN @NEW_GRADE1 IN ('C','C+','C-') THEN "C" + 1 ELSE "C" END,	
	"D" = CASE WHEN @NEW_GRADE1 ='D' THEN "D" + 1 ELSE "D" END,
	"OTHER" = CASE WHEN @NEW_GRADE1 IN ('F','S','U') THEN "OTHER" + 1 ELSE "OTHER" END
	WHERE 
	COURSE_ID = (SELECT CO_ID FROM #TEMP1) AND 
	CLASS_ID = (SELECT CL_ID FROM #TEMP1) AND
	FACULTY = (SELECT FACULTY FROM #TEMP1)
	
	
	UPDATE CPG SET 
	"A" = CASE WHEN @OLD_GRADE IN ('A','A+','A-') THEN "A" - 1 ELSE "A" END,
	"B" = CASE WHEN @OLD_GRADE IN ('B','B+','B-') THEN "B" - 1 ELSE "B" END,	
	"C" = CASE WHEN @OLD_GRADE IN ('C','C+','C-') THEN "C" - 1 ELSE "C" END,	
	"D" = CASE WHEN @OLD_GRADE ='D' THEN "D" - 1 ELSE "D" END,
	"OTHER" = CASE WHEN @OLD_GRADE IN ('F','S','U') THEN "OTHER" - 1 ELSE "OTHER" END
	WHERE 
	COURSE_ID = (SELECT CO_ID FROM #TEMP1) AND 
	CLASS_ID = (SELECT CL_ID FROM #TEMP1) AND
	FACULTY = (SELECT FACULTY FROM #TEMP1)
	
	DROP TABLE #TEMP1
	
END

