1.A ANSWER

SELECT C.CLASS_TITLE,C.QUARTER,C.CLASS_YEAR,E.UNITS_TAKING,S.SECTION_NUM FROM
CLASS C, SECTION S, SECTIONENROLLMENT E, STUDENT N WHERE N.SSN = 16 AND N.STUDENT_ID = E.STUDENT_ID AND S.CLASS_ID = C.id AND
E.SECTION_ID = S.SECTION_NUM;


1.B ANSWER
SELECT S.SSN, S.FIRSTNAME,S.LASTNAME, E.UNITS_TAKING,E.GRADE_OPTION
FROM STUDENT S, CLASS C, SECTIONENROLLMENT E, SECTION SC WHERE
E.SECTION_ID = SC.SECTION_NUM AND SC.CLASS_ID = C.id AND C.CLASS_TITLE = 'INTO TO THEORY' AND
C.QUARTER = 'SP' AND C.CLASS_YEAR = '2017' AND E.STUDENT_ID = S.STUDENT_ID;


1.C. ANSWER
SELECT DEPARTMENT, COURSENUMBER, CLASS_TITLE,QUARTER, CLASS_YEAR, CT.UNITS_TAKEN, CT.GRADE_RECEIVED
FROM CLASSESTAKEN CT
JOIN CLASS CL ON CT.CLASS_ID = CL.ID
JOIN COURSE_WITHCLASS CWC ON CWC.CLASS_ID = CL.ID
JOIN COURSE CR ON CWC.COURSE_ID = CR.ID
LEFT OUTER JOIN GRADE_CONVERSION GC ON CT.GRADE_RECEIVED = GC.LETTER_GRADE
WHERE
CT.STUDENT_ID = 'M19'
ORDER BY CLASS_YEAR, QUARTER, CLASS_TITLE


1.E ANSWER
SELECT DEGREE_NAME, CATEGORY.CATEGORY_NAME, CATEGORY.REQ_UNITS ,SUM(UNITS_TAKEN)AS UNITS_TAKEN FROM DEGREE D
JOIN COURSECATEGORY CATEGORY ON CATEGORY.DEGREE_ID = D.ID
JOIN COURSE COR ON COR.ID = CATEGORY.COURSE_ID
JOIN COURSE_WITHCLASS CWC ON CWC.COURSE_ID = COR.ID
JOIN CLASS CL ON CWC.CLASS_ID = CL.ID
LEFT OUTER JOIN CLASSESTAKEN CT ON CT.CLASS_ID = CL.ID
WHERE DEGREE_NAME = 'COMPUTER SCIENCE' AND DEGREE_TYPE='BS' AND (GRADE_RECEIVED NOT IN('D','F','IN','U') OR GRADE_RECEIVED IS NULL) AND CT.STUDENT_ID = 'A2'
GROUP BY DEGREE_NAME,CATEGORY_NAME, DEGREE_TYPE, CATEGORY.REQ_UNITS








MILESTONE 4

NUMBER 3

CREATE TRIGGER prof_multiple_section 
ON CURRENTLYTEACHING
INSTEAD OF INSERT AS
BEGIN
	DECLARE @PROF_NAME VARCHAR(20)
	DECLARE @SEC_NUM INT
	
	SELECT @PROF_NAME=FACULTY FROM inserted
	SELECT @SEC_NUM=SECTION_ID FROM inserted
	
	SELECT WC.DAYS, WM.START_TIME, WM.END_TIME INTO #TEMP1 FROM WEEKLYMEETING WM 
	JOIN WEEKCONVERSION WC ON WC.SCHEDULE = WM.DAYS
	JOIN SECTION S ON S.ID = WM.SEC_ID
	JOIN CURRENTLYTEACHING CT ON CT.SECTION_ID=WM.SEC_ID 
	WHERE
	CT.FACULTY=@PROF_NAME
	ORDER BY DAYS
	
	SELECT WC.DAYS, WM.START_TIME, WM.END_TIME INTO #TEMP2 FROM WEEKLYMEETING WM 
	JOIN WEEKCONVERSION WC ON WC.SCHEDULE = WM.DAYS
	JOIN SECTION S ON S.ID = WM.SEC_ID
	WHERE
	S.ID = @SEC_NUM
	ORDER BY DAYS
	
	IF ((SELECT COUNT(*) FROM #TEMP1 T1 WHERE EXISTS
	(SELECT * FROM #TEMP2 T2 WHERE T1.DAYS=T2.DAYS AND T1.START_TIME=T2.START_TIME))>0)
	BEGIN
		RAISERROR ('COULD NOT ADD THE SECTION',16,1)
		RETURN
	END
	
	INSERT INTO CURRENTLYTEACHING VALUES(@PROF_NAME,@SEC_NUM)
	
	DROP TABLE #TEMP1
	DROP TABLE #TEMP2
END
