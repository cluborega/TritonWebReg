CREATE TABLE STUDENT(
  id INT UNIQUE,
  STUDENT_ID VARCHAR(20),
  SSN VARCHAR(20) NOT NULL UNIQUE,
  FIRSTNAME VARCHAR(20) NOT NULL,
  MIDDLENAME VARCHAR(20),
  LASTNAME VARCHAR(20) NOT NULL,
  RESIDENCY VARCHAR(20) NOT NULL,
  STATUS VARCHAR(20) NOT NULL,
  PRIMARY KEY (STUDENT_ID)
);

CREATE TABLE FACULTY(
  id INT UNIQUE,
  FACULTY VARCHAR(20),
  TITLE VARCHAR(20) NOT NULL,
  DEPARTMENT VARCHAR(20) NOT NULL,
  PRIMARY KEY (FACULTY)
);

CREATE TABLE CLASS(
  id INT UNIQUE,
  CLASS_TITLE VARCHAR(20),
  QUARTER VARCHAR(20),
  CLASS_YEAR CHAR(4),
  PRIMARY KEY (CLASS_TITLE, QUARTER, CLASS_YEAR)
);

CREATE TABLE SECTION(
  id INT UNIQUE,
  SECTION_NUM VARCHAR(20),
  CLASS_ID INTEGER,
  SECTION_MAX INTEGER,
  PRIMARY KEY (SECTION_NUM, CLASS_ID),
  FOREIGN KEY (CLASS_ID) REFERENCES Class (id) --ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE DEGREE(
  id INT UNIQUE,
  DEGREE_TYPE VARCHAR(20),
  DEGREE_NAME VARCHAR(20),
  REQ_UNITS INTEGER,
  PRIMARY KEY (DEGREE_TYPE, DEGREE_NAME)
);

CREATE TABLE ATTENDANCE(
  id INT UNIQUE,
  STUDENT_ID VARCHAR(20),
  START_DATE DATE NOT NULL,
  END_DATE DATE NOT NULL,
  PRIMARY KEY (STUDENT_ID),
  FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT (STUDENT_ID) --ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE PROBATION(
  id INT UNIQUE,
  STUDENT_ID VARCHAR(20),
  START_DATE DATE NOT NULL,
  END_DATE DATE NOT NULL,
  REASON VARCHAR(20) NOT NULL,
  PRIMARY KEY (STUDENT_ID),
  FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT (STUDENT_ID) --ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE PREVIOUSDEGREE(
  id INT UNIQUE,
  STUDENT_ID VARCHAR(20),
  TYPE VARCHAR(20),
  MAJOR VARCHAR(20),
  SCHOOL_NAME VARCHAR(20),
  PRIMARY KEY (STUDENT_ID, TYPE, MAJOR, SCHOOL_NAME),
  FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT (STUDENT_ID)-- ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE UNDERGRADUATE(
  id INT UNIQUE,
  UNDERGRADUATE_ID VARCHAR(20),
  COLLEGE VARCHAR(20) NOT NULL,
  MAJOR VARCHAR(20) NOT NULL,
  MINOR VARCHAR(20),
  PRIMARY KEY (UNDERGRADUATE_ID),
  FOREIGN KEY (UNDERGRADUATE_ID) REFERENCES STUDENT (STUDENT_ID) --ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE MSUNDERGRADUATE(
  id INT UNIQUE,
  MSUNDERGRADUATE_ID VARCHAR(20),
  DEPARTMENT VARCHAR(20) NOT NULL,
  PRIMARY KEY (MSUNDERGRADUATE_ID),
  FOREIGN KEY (MSUNDERGRADUATE_ID) REFERENCES UNDERGRADUATE (UNDERGRADUATE_ID)-- ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE GRADUATE(
  id INT UNIQUE,
  GRADUATE_ID VARCHAR(20),
  GRADUATE_TYPE VARCHAR(20) NOT NULL,
  MAJOR VARCHAR(20) NOT NULL,
  DEPARTMENT VARCHAR(20) NOT NULL,
  PRIMARY KEY (GRADUATE_ID),
  FOREIGN KEY (GRADUATE_ID) REFERENCES STUDENT (STUDENT_ID) --ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE MASTERSTUDENT(
  id INT UNIQUE,
  MASTERSTUDENT_ID VARCHAR(20),
  ADVISOR VARCHAR(20),
  PRIMARY KEY (MASTERSTUDENT_ID),
  FOREIGN KEY (MASTERSTUDENT_ID) REFERENCES GRADUATE (GRADUATE_ID),-- ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (ADVISOR) REFERENCES FACULTY (FACULTY) --ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE PHDSTUDENT(
  id INT UNIQUE,
  PHDSTUDENT_ID VARCHAR(20),
  CANDIDATE_TYPE VARCHAR(20) NOT NULL,
  PRIMARY KEY (PHDSTUDENT_ID),
  FOREIGN KEY (PHDSTUDENT_ID) REFERENCES GRADUATE (GRADUATE_ID) --ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE PRECANDIDATE(
  id INT UNIQUE,
  PRECANDIDATE_ID VARCHAR(20),
  ADVISOR VARCHAR(20),
  PRIMARY KEY (PRECANDIDATE_ID),
  FOREIGN KEY (PRECANDIDATE_ID) REFERENCES PHDSTUDENT (PHDSTUDENT_ID),-- ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (ADVISOR) REFERENCES FACULTY (FACULTY)-- ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE CANDIDATE(
  id INT UNIQUE,
  CANDIDATE_ID VARCHAR(20),
  ADVISOR VARCHAR(20) NOT NULL,
  PRIMARY KEY (CANDIDATE_ID),
  FOREIGN KEY (CANDIDATE_ID) REFERENCES PHDSTUDENT (PHDSTUDENT_ID),-- ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (ADVISOR) REFERENCES FACULTY (FACULTY) --ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE THESISCOMMITTEE(
  id INT UNIQUE,
  GRADUATE_ID VARCHAR(20),
  FACULTY VARCHAR(20),
  PRIMARY KEY (GRADUATE_ID, FACULTY),
  FOREIGN KEY (GRADUATE_ID) REFERENCES GRADUATE (GRADUATE_ID),-- ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (FACULTY) REFERENCES FACULTY (FACULTY) --ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE SECTIONENROLLMENT(
  id INT UNIQUE,
  STUDENT_ID VARCHAR(20),
  SECTION_ID INTEGER,
  UNITS_TAKING INTEGER NOT NULL,
  GRADE_OPTION VARCHAR(20) NOT NULL,
  PRIMARY KEY (STUDENT_ID, SECTION_ID),
  FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT (STUDENT_ID),-- ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (SECTION_ID) REFERENCES Section (id) --ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE CLASSESTAKEN(
  id INT UNIQUE,
  STUDENT_ID VARCHAR(20),
  SECTIONENROLLMENT_ID INTEGER,
  grade_received VARCHAR(20) NOT NULL,
  PRIMARY KEY (STUDENT_ID, SECTIONENROLLMENT_ID),
  FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT (STUDENT_ID),-- ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (SECTIONENROLLMENT_ID) REFERENCES SECTIONENROLLMENT (id) --ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE TEACHINGHISTORY(
  id INT UNIQUE,
  FACULTY VARCHAR(20),
  CLASS_ID INTEGER,
  PRIMARY KEY (FACULTY, CLASS_ID),
  FOREIGN KEY (FACULTY) REFERENCES FACULTY (FACULTY),-- ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (CLASS_ID) REFERENCES Class (id) --ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE CURRENTLYTEACHING(
  id INT UNIQUE,
  SECTION_ID INTEGER,
  FACULTY VARCHAR(20),
  PRIMARY KEY (SECTION_ID),
  FOREIGN KEY (FACULTY) REFERENCES FACULTY (FACULTY),-- ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (SECTION_ID) REFERENCES Section (id) --ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE COURSE(
  id INT UNIQUE,
  DEPARTMENT VARCHAR(20),
  COURSENUMBER VARCHAR(20),
  MINUNITS INTEGER NOT NULL,-- CHECK (MINUNITS > 0),
  MAXUNITS INTEGER NOT NULL,-- CHECK (MAXUNITS >= MINUNITS),
  GRADE_OPTION VARCHAR(20) NOT NULL,
  REQUIRESLAB BIT,
  REQUIRESCONSENT BIT,
  PRIMARY KEY (DEPARTMENT, COURSENUMBER)
);

CREATE TABLE PREREQUISITE(
  id INT UNIQUE,
  TARGET_ID INTEGER,
  PREREQUISITE_ID INTEGER,
  PRIMARY KEY (TARGET_ID, PREREQUISITE_ID),
  FOREIGN KEY (TARGET_ID) REFERENCES COURSE (id),-- ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (PREREQUISITE_ID) REFERENCES COURSE (id),-- ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE COURSECONCERNTRATION(
  id INT UNIQUE,
  COURSE_ID INTEGER,
  DEGREE_ID INTEGER,
  CONCERNTRATION_NAME VARCHAR(20),
  REQ_UNITS INTEGER NOT NULL,
  MINGPA NUMERIC(3, 2),
  PRIMARY KEY (COURSE_ID, DEGREE_ID, CONCERNTRATION_NAME),
  FOREIGN KEY (COURSE_ID) REFERENCES COURSE (id),-- ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (DEGREE_ID) REFERENCES Degree (id) --ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE COURSECATEGORY(
  id INT UNIQUE,
  COURSE_ID INTEGER,
  DEGREE_ID INTEGER,
  CATEGORY_NAME VARCHAR(20),
  REQ_UNITS INTEGER NOT NULL,
  MINGPA NUMERIC(3, 2),
  PRIMARY KEY (COURSE_ID, DEGREE_ID, CATEGORY_NAME),
  FOREIGN KEY (COURSE_ID) REFERENCES COURSE (id),-- ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (DEGREE_ID) REFERENCES Degree (id) --ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE CLASSINSTANCE(
  id INT UNIQUE,
  COURSE_ID INTEGER,
  CLASS_ID INTEGER,
  PRIMARY KEY (COURSE_ID, CLASS_ID),
  FOREIGN KEY (COURSE_ID) REFERENCES COURSE (id),-- ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (CLASS_ID) REFERENCES Class (id) --ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE DEGREESEARNED(
  id INT UNIQUE,
  STUDENT_ID VARCHAR(20),
  DEGREE_ID INTEGER,
  PRIMARY KEY (STUDENT_ID, DEGREE_ID),
  FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT (STUDENT_ID),-- ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (DEGREE_ID) REFERENCES Degree (id)-- ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE QUARTER(
  id INT PRIMARY KEY,
  QUARTER VARCHAR(20) NOT NULL,
  YEAR CHAR(4) NOT NULL
);

